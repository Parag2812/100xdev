"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UnionFindArray = exports.UnionFindSet = void 0;
class UnionFindSet {
    constructor() {
        this.id = 0;
        this.map = new Map();
        this.mapRev = new Map();
    }
    find(v) {
        if (this.map.has(v)) {
            return this.map.get(v);
        }
        else {
            this.map.set(v, ++this.id);
            this.mapRev.set(this.id, new Set([v]));
            return this.id;
        }
    }
    union(a, b) {
        const aid = this.find(a);
        const bid = this.find(b);
        let aset = this.mapRev.get(aid);
        let bset = this.mapRev.get(bid);
        if (aset.size > bset.size) {
            for (const v of bset.values()) {
                this.map.set(v, aid);
                aset.add(v);
            }
            this.mapRev.delete(bid);
        }
        else {
            for (const v of aset.values()) {
                this.map.set(v, bid);
                bset.add(v);
            }
            this.mapRev.delete(aid);
        }
    }
    isUnion(a, b) {
        return this.find(a) === this.find(b);
    }
}
exports.UnionFindSet = UnionFindSet;
class UnionFindArray {
    constructor() {
        this.data = [];
    }
    find(v) {
        if (this.data[v] === undefined) {
            this.data[v] = -1;
            return v;
        }
        else if (this.data[v] === -1) {
            return v;
        }
        return (this.data[v] = this.find(this.data[v]));
    }
    union(a, b) {
        this.data[this.find(a)] = this.find(b);
    }
    isUnion(a, b) {
        return this.find(a) === this.find(b);
    }
}
exports.UnionFindArray = UnionFindArray;
