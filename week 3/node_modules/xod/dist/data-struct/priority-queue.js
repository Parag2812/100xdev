"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PriorityQueue = void 0;
const common_1 = require("../algorithm/common");
class PriorityQueue {
    constructor(...args) {
        const [arg0 = common_1.defaultCompareFn, arg1 = common_1.defaultCompareFn] = args;
        if (Array.isArray(arg0)) {
            this.compareFn = arg1;
            this.data = [];
            for (let i = 0, l = arg0.length; i < l; ++i) {
                this.insert(arg0[i]);
            }
        }
        else {
            this.compareFn = arg0;
            this.data = [];
        }
    }
    exch(i, j) {
        const tmp = this.data[i];
        this.data[i] = this.data[j];
        this.data[j] = tmp;
    }
    less(i, j) {
        return this.compareFn(this.data[i], this.data[j]) > 0;
    }
    swim(i) {
        while (i > 1 && this.less(i >> 1, i)) {
            this.exch(i >> 1, i);
            i >>= 1;
        }
    }
    sink(i) {
        const N = this.size();
        while (2 * i <= N) {
            let j = 2 * i;
            if (j < N && this.less(j, j + 1))
                j++;
            if (!this.less(i, j))
                break;
            this.exch(i, j);
            i = j;
        }
    }
    insert(val) {
        const i = this.size() + 1;
        this.data[i] = val;
        this.swim(i);
    }
    top() {
        return this.isEmpty() ? null : this.data[1];
    }
    delTop() {
        if (this.isEmpty()) {
            return null;
        }
        else {
            const N = this.size();
            this.data[0] = this.data[1];
            this.data[1] = this.data[N];
            this.data.length = N;
            if (N > 1) {
                this.sink(1);
            }
            return this.data[0];
        }
    }
    size() {
        return Math.max(0, this.data.length - 1);
    }
    isEmpty() {
        return this.size() === 0;
    }
}
exports.PriorityQueue = PriorityQueue;
