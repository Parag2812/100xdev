"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStringWidth = exports.flipArray2D = exports.arrayHeapToBinaryTree = exports.array1dToBinayTree = exports.array1dTo2d = exports.isPlainObj = void 0;
const string_width_1 = __importDefault(require("string-width"));
function isPlainObj(data) {
    return Object.prototype.toString.call(data) === '[object Object]';
}
exports.isPlainObj = isPlainObj;
function array1dTo2d(data, width = 10) {
    const r = [];
    const il = Math.ceil(data.length / width);
    let i = 0;
    while (i < il) {
        r.push(data.slice(i * width, (i + 1) * width));
        i++;
    }
    return r;
}
exports.array1dTo2d = array1dTo2d;
function array1dToBinayTree(data) {
    const L = data.length;
    if (L === 0)
        return null;
    const root = { val: data[0], left: null, right: null };
    let list = [root];
    let i = 1;
    while (list.length) {
        const newList = [];
        list.forEach(node => {
            node.left = i < L && data[i] !== null ? { val: data[i], left: null, right: null } : null;
            i++;
            node.right = i < L && data[i] !== null ? { val: data[i], left: null, right: null } : null;
            i++;
            if (node.left)
                newList.push(node.left);
            if (node.right)
                newList.push(node.right);
        });
        list = newList;
    }
    return root;
}
exports.array1dToBinayTree = array1dToBinayTree;
function arrayHeapToBinaryTree(data) {
    const L = data.length;
    const f = (i) => {
        if (i < L) {
            return {
                val: data[i],
                left: f(i * 2),
                right: f(i * 2 + 1),
            };
        }
        else {
            return null;
        }
    };
    return f(1);
}
exports.arrayHeapToBinaryTree = arrayHeapToBinaryTree;
function flipArray2D(data) {
    const r = [];
    const H = data.length;
    for (let h = 0; h < H; ++h) {
        const row = data[h];
        for (let w = 0, l = row.length; w < l; ++w) {
            if (r[w] === undefined) {
                r[w] = [];
            }
            r[w][h] = row[w];
        }
    }
    return r;
}
exports.flipArray2D = flipArray2D;
exports.getStringWidth = string_width_1.default;
