"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.rand = void 0;
const data_1 = require("./data");
function r() {
    return Math.random();
}
function rInt(start, end) {
    if (typeof end == 'number') {
        return ~~(Math.random() * (end - start) + start);
    }
    else {
        return ~~(Math.random() * start);
    }
}
function rString() {
    return data_1.words[rInt(data_1.words.length)];
}
function rArray(fn, len) {
    return new Array(len).fill(0).map(fn);
}
function rTable(fn, h, w) {
    return new Array(h).fill(0).map(() => new Array(w).fill(0).map(fn));
}
function rBinaryTree(fn, n) {
    if (n === 0) {
        return null;
    }
    else {
        const u = rInt(n);
        return {
            val: fn(),
            left: rBinaryTree(fn, u),
            right: rBinaryTree(fn, n - u - 1),
        };
    }
}
function rTree(fn, n) {
    if (n === 0) {
        return null;
    }
    else if (n === 1) {
        return {
            val: fn(),
            childs: [],
        };
    }
    const l = rInt(Math.min(n - 1, 3)) + 1;
    const k = new Array(l).fill(1);
    n -= l + 1;
    while (n--) {
        k[rInt(l)]++;
    }
    return {
        val: fn(),
        childs: k.map(v => rTree(fn, v)),
    };
}
function intArray(n, start = 0) {
    const r = new Array(n);
    for (let i = 0; i < n; ++i, ++start) {
        r[i] = start;
    }
    for (let i = n - 1; i > 0; --i) {
        const j = rInt(i);
        [r[i], r[j]] = [r[j], r[i]];
    }
    return r;
}
exports.rand = {
    int: rInt,
    string: rString,
    array: rArray,
    table: rTable,
    binaryTree: rBinaryTree,
    tree: rTree,
    intArray,
};
